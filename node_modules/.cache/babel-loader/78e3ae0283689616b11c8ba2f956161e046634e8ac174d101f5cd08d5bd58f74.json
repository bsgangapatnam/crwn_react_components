{"ast":null,"code":"var _jsxFileName = \"/Users/balagangapatnam/capstone/crwn-clothing/src/contexts/cart.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { createAction } from '../utils/reducer/reducer.utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? {\n      ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n  return [...cartItems, {\n    ...productToAdd,\n    quantity: 1\n  }];\n};\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  // check if quantity is equal to 1, if it is remove that item from the cart\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  }\n\n  // return back cartitems with matching cart item with reduced quantity\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? {\n    ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0\n});\nconst CART_ACTION_TYPES = {\n  SET_CART_ITEMS: 'SET_CART_ITEMS',\n  SET_IS_CART_OPEN: 'SET_IS_CART_OPEN'\n};\nconst INITIAL_STATE = {\n  isCartOpen: true,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0\n};\nconst cartReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case 'SET_CART_ITEMS':\n      return {\n        ...state,\n        ...payload\n      };\n    case 'SET_CART_ITEMS':\n      return {\n        ...state,\n        ...payload\n      };\n    default:\n      throw new Error(`unhandled type ${type} in cartReducer`);\n  }\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [{\n    cartItems,\n    isCartOpen,\n    cartCount,\n    cartTotal\n  }, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n  const updateCartItemsReducer = newCartItems => {\n    const newCartCount = newCartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    const newCartTotal = newCartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    dispatch({\n      type: 'SET_CART_ITEMS',\n      payload: {\n        cartItems: newCartItems,\n        cartTotal: newCartTotal,\n        cartCount: newCartCount\n      }\n    });\n  };\n  const addItemToCart = productToAdd => {\n    const newCartItems = addCartItem(cartItems, productToAdd);\n    updateCartItemsReducer(newCartItems);\n  };\n  const removeItemToCart = cartItemToRemove => {\n    const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n  const clearItemFromCart = cartItemToClear => {\n    const newCartItems = clearCartItem(cartItems, cartItemToClear);\n    updateCartItemsReducer(newCartItems);\n  };\n  const setIsCartOpen = bool => {\n    dispatch({\n      type: 'SET_IS_CART_OPEN',\n      payload: bool\n    });\n  };\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    removeItemToCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 10\n  }, this);\n};\n_s(CartProvider, \"KMBiYUJn8nwY9dsxTP1OP3slwQ8=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useReducer","createAction","jsxDEV","_jsxDEV","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CartContext","isCartOpen","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","cartCount","cartTotal","CART_ACTION_TYPES","SET_CART_ITEMS","SET_IS_CART_OPEN","INITIAL_STATE","cartReducer","state","action","type","payload","Error","CartProvider","children","_s","dispatch","updateCartItemsReducer","newCartItems","newCartCount","reduce","total","newCartTotal","price","removeItemToCart","bool","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/balagangapatnam/capstone/crwn-clothing/src/contexts/cart.context.jsx"],"sourcesContent":["import { createContext, useReducer } from 'react';\n\nimport { createAction } from '../utils/reducer/reducer.utils';\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === productToAdd.id\n  );\n\n  if (existingCartItem) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === productToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === cartItemToRemove.id\n  );\n\n  // check if quantity is equal to 1, if it is remove that item from the cart\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n  }\n\n  // return back cartitems with matching cart item with reduced quantity\n  return cartItems.map((cartItem) =>\n    cartItem.id === cartItemToRemove.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) =>\n  cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\n\nexport const CartContext = createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0,\n});\n\nconst CART_ACTION_TYPES = {\n  SET_CART_ITEMS: 'SET_CART_ITEMS',\n  SET_IS_CART_OPEN: 'SET_IS_CART_OPEN'\n};\n\nconst INITIAL_STATE = {\n  isCartOpen: true,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0,\n}\n\nconst cartReducer = (state, action) => {\n  const { type, payload } = action;\n\n  switch(type) {\n    case 'SET_CART_ITEMS':\n      return {\n        ...state,\n        ...payload\n      };\n      case 'SET_CART_ITEMS':\n      return {\n        ...state,\n        ...payload\n      }\n      default: \n        throw new Error(`unhandled type ${type} in cartReducer`);\n  }\n};\n\n\nexport const CartProvider = ({ children }) => {\n\n  const [{cartItems, isCartOpen, cartCount, cartTotal}, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n\n  const updateCartItemsReducer = (newCartItems) => {\n    const newCartCount = newCartItems.reduce(\n      (total, cartItem) => total + cartItem.quantity,\n      0\n    );\n\n    const newCartTotal = newCartItems.reduce(\n      (total, cartItem) => total + cartItem.quantity * cartItem.price,\n      0\n    );\n\n    dispatch({ type: 'SET_CART_ITEMS', payload: {cartItems: newCartItems, cartTotal: newCartTotal, cartCount: newCartCount }})\n  }\n\n  const addItemToCart = (productToAdd) => {\n    const newCartItems = addCartItem(cartItems, productToAdd);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const removeItemToCart = (cartItemToRemove) => {\n    const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const clearItemFromCart = (cartItemToClear) => {\n    const newCartItems = clearCartItem(cartItems, cartItemToClear);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const setIsCartOpen = (bool) => {\n    dispatch({ type: 'SET_IS_CART_OPEN', payload: bool });\n  }\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    removeItemToCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAEjD,SAASC,YAAY,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,WAAW,GAAGA,CAACC,SAAS,EAAEC,YAAY,KAAK;EAC/C,MAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAI,CACpCC,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKJ,YAAY,CAACI,EAC7C,CAAC;EAED,IAAIH,gBAAgB,EAAE;IACpB,OAAOF,SAAS,CAACM,GAAG,CAAEF,QAAQ,IAC5BA,QAAQ,CAACC,EAAE,KAAKJ,YAAY,CAACI,EAAE,GAC3B;MAAE,GAAGD,QAAQ;MAAEG,QAAQ,EAAEH,QAAQ,CAACG,QAAQ,GAAG;IAAE,CAAC,GAChDH,QACN,CAAC;EACH;EAEA,OAAO,CAAC,GAAGJ,SAAS,EAAE;IAAE,GAAGC,YAAY;IAAEM,QAAQ,EAAE;EAAE,CAAC,CAAC;AACzD,CAAC;AAED,MAAMC,cAAc,GAAGA,CAACR,SAAS,EAAES,gBAAgB,KAAK;EACtD;EACA,MAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAI,CACpCC,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKI,gBAAgB,CAACJ,EACjD,CAAC;;EAED;EACA,IAAIH,gBAAgB,CAACK,QAAQ,KAAK,CAAC,EAAE;IACnC,OAAOP,SAAS,CAACU,MAAM,CAAEN,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKI,gBAAgB,CAACJ,EAAE,CAAC;EAC5E;;EAEA;EACA,OAAOL,SAAS,CAACM,GAAG,CAAEF,QAAQ,IAC5BA,QAAQ,CAACC,EAAE,KAAKI,gBAAgB,CAACJ,EAAE,GAC/B;IAAE,GAAGD,QAAQ;IAAEG,QAAQ,EAAEH,QAAQ,CAACG,QAAQ,GAAG;EAAE,CAAC,GAChDH,QACN,CAAC;AACH,CAAC;AAED,MAAMO,aAAa,GAAGA,CAACX,SAAS,EAAEY,eAAe,KAC/CZ,SAAS,CAACU,MAAM,CAAEN,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKO,eAAe,CAACP,EAAE,CAAC;AAEpE,OAAO,MAAMQ,WAAW,gBAAGnB,aAAa,CAAC;EACvCoB,UAAU,EAAE,KAAK;EACjBC,aAAa,EAAEA,CAAA,KAAM,CAAC,CAAC;EACvBf,SAAS,EAAE,EAAE;EACbgB,aAAa,EAAEA,CAAA,KAAM,CAAC,CAAC;EACvBC,kBAAkB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC5BC,iBAAiB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC3BC,SAAS,EAAE,CAAC;EACZC,SAAS,EAAE;AACb,CAAC,CAAC;AAEF,MAAMC,iBAAiB,GAAG;EACxBC,cAAc,EAAE,gBAAgB;EAChCC,gBAAgB,EAAE;AACpB,CAAC;AAED,MAAMC,aAAa,GAAG;EACpBV,UAAU,EAAE,IAAI;EAChBd,SAAS,EAAE,EAAE;EACbmB,SAAS,EAAE,CAAC;EACZC,SAAS,EAAE;AACb,CAAC;AAED,MAAMK,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGF,MAAM;EAEhC,QAAOC,IAAI;IACT,KAAK,gBAAgB;MACnB,OAAO;QACL,GAAGF,KAAK;QACR,GAAGG;MACL,CAAC;IACD,KAAK,gBAAgB;MACrB,OAAO;QACL,GAAGH,KAAK;QACR,GAAGG;MACL,CAAC;IACD;MACE,MAAM,IAAIC,KAAK,CAAC,kBAAkBF,IAAI,iBAAiB,CAAC;EAC9D;AACF,CAAC;AAGD,OAAO,MAAMG,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAE5C,MAAM,CAAC;IAACjC,SAAS;IAAEc,UAAU;IAAEK,SAAS;IAAEC;EAAS,CAAC,EAAEc,QAAQ,CAAC,GAAGvC,UAAU,CAAC8B,WAAW,EAAED,aAAa,CAAC;EAExG,MAAMW,sBAAsB,GAAIC,YAAY,IAAK;IAC/C,MAAMC,YAAY,GAAGD,YAAY,CAACE,MAAM,CACtC,CAACC,KAAK,EAAEnC,QAAQ,KAAKmC,KAAK,GAAGnC,QAAQ,CAACG,QAAQ,EAC9C,CACF,CAAC;IAED,MAAMiC,YAAY,GAAGJ,YAAY,CAACE,MAAM,CACtC,CAACC,KAAK,EAAEnC,QAAQ,KAAKmC,KAAK,GAAGnC,QAAQ,CAACG,QAAQ,GAAGH,QAAQ,CAACqC,KAAK,EAC/D,CACF,CAAC;IAEDP,QAAQ,CAAC;MAAEN,IAAI,EAAE,gBAAgB;MAAEC,OAAO,EAAE;QAAC7B,SAAS,EAAEoC,YAAY;QAAEhB,SAAS,EAAEoB,YAAY;QAAErB,SAAS,EAAEkB;MAAa;IAAC,CAAC,CAAC;EAC5H,CAAC;EAED,MAAMrB,aAAa,GAAIf,YAAY,IAAK;IACtC,MAAMmC,YAAY,GAAGrC,WAAW,CAACC,SAAS,EAAEC,YAAY,CAAC;IACzDkC,sBAAsB,CAACC,YAAY,CAAC;EACtC,CAAC;EAED,MAAMM,gBAAgB,GAAIjC,gBAAgB,IAAK;IAC7C,MAAM2B,YAAY,GAAG5B,cAAc,CAACR,SAAS,EAAES,gBAAgB,CAAC;IAChE0B,sBAAsB,CAACC,YAAY,CAAC;EACtC,CAAC;EAED,MAAMlB,iBAAiB,GAAIN,eAAe,IAAK;IAC7C,MAAMwB,YAAY,GAAGzB,aAAa,CAACX,SAAS,EAAEY,eAAe,CAAC;IAC9DuB,sBAAsB,CAACC,YAAY,CAAC;EACtC,CAAC;EAED,MAAMrB,aAAa,GAAI4B,IAAI,IAAK;IAC9BT,QAAQ,CAAC;MAAEN,IAAI,EAAE,kBAAkB;MAAEC,OAAO,EAAEc;IAAK,CAAC,CAAC;EACvD,CAAC;EAED,MAAMC,KAAK,GAAG;IACZ9B,UAAU;IACVC,aAAa;IACbC,aAAa;IACb0B,gBAAgB;IAChBxB,iBAAiB;IACjBlB,SAAS;IACTmB,SAAS;IACTC;EACF,CAAC;EAED,oBAAOtB,OAAA,CAACe,WAAW,CAACgC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAZ,QAAA,EAAEA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAChB,EAAA,CAjDWF,YAAY;AAAAmB,EAAA,GAAZnB,YAAY;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}